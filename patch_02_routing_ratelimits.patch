--- a/tradingbot/core/routing.py
+++ b/tradingbot/core/routing.py
@@ -0,0 +1,42 @@
+from typing import Callable, Dict, Any
+from dataclasses import dataclass
+from .loggerconfig import get_logger
+from .exchange_conformance import clamp_order_if_needed
+
+log = get_logger(__name__)
+
+@dataclass
+class OrderContext:
+    asset: str
+    symbol: str
+    side: str
+    qty: float
+    price: float | None
+    extra: Dict[str, Any]
+
+class PaperRouter:
+    """
+    Paper mode: uses mainnet quotes for read-only; executes orders in local simulator.
+    The simulator function must be injected; this keeps Bybit/IBKR logic out of here.
+    """
+    def __init__(self, simulate_order: Callable[[OrderContext], Dict[str, Any]]):
+        self.simulate_order = simulate_order
+
+    async def submit(self, oc: OrderContext) -> Dict[str, Any]:
+        oc = clamp_order_if_needed(oc)
+        result = await self.simulate_order(oc)
+        return result
+
+class LiveRouter:
+    """
+    Live mode: forwards orders to the provided broker submitters.
+    You inject per-venue submit functions, e.g., {'bybit': bybit_submit, 'ibkr': ibkr_submit}
+    """
+    def __init__(self, submitters: Dict[str, Callable[[OrderContext], Any]]):
+        self.submitters = submitters
+
+    async def submit(self, venue: str, oc: OrderContext) -> Any:
+        if venue not in self.submitters:
+            raise ValueError(f"No live submitter configured for venue: {venue}")
+        oc = clamp_order_if_needed(oc)
+        return await self.submitters[venue](oc)
--- a/tradingbot/core/live_adapters.py
+++ b/tradingbot/core/live_adapters.py
@@ -0,0 +1,15 @@
+from typing import Any, Dict
+from .loggerconfig import get_logger
+
+log = get_logger(__name__)
+
+async def bybit_submit_wrapper(adapter, oc) -> Dict[str, Any]:
+    """Call the Bybit adapter with a normalized OrderContext."""
+    # Expect the adapter to have an async submit_order(symbol, side, qty, price, **extra)
+    return await adapter.submit_order(oc.symbol, oc.side, oc.qty, oc.price, **oc.extra)
+
+async def ibkr_submit_wrapper(adapter, oc) -> Dict[str, Any]:
+    """Call the IBKR adapter with a normalized OrderContext."""
+    # Expect the adapter to have an async place_order(contract, action, quantity, price=None, **extra)
+    # Here we assume oc.extra contains a constructed IBKR Contract when asset is forex/options
+    return await adapter.place_order(oc.extra.get('contract'), oc.side.upper(), oc.qty, oc.price, **oc.extra)
--- a/tradingbot/core/paper_sim_wrapper.py
+++ b/tradingbot/core/paper_sim_wrapper.py
@@ -0,0 +1,9 @@
+from typing import Dict, Any
+from .loggerconfig import get_logger
+
+log = get_logger(__name__)
+
+async def simulate_with_paper_trader(paper_trader, oc) -> Dict[str, Any]:
+    """Use the existing paper trader to simulate an order based on OrderContext."""
+    # Expect paper_trader to expose an async submit_order(symbol, side, qty, price, **extra)
+    return await paper_trader.submit_order(oc.symbol, oc.side, oc.qty, oc.price, **oc.extra)
--- a/.env.example
+++ b/.env.example
@@ -12,3 +12,6 @@
 BYBIT_API_SECRET=your_bybit_api_secret
 
 # Add other configuration as needed
+
+# Rate limit headroom (0.9 = 90%)
+RATE_LIMIT_PCT=0.9
