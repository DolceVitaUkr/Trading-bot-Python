*** Begin Patch
*** Update File: tradingbot/core/reconciler.py
@@
-from typing import Optional, Dict, Any, List
-from .loggerconfig import get_logger
-log = get_logger(__name__)
-
-async def reconcile_once(bybit_adapter=None, ibkr_adapter=None) -> Dict[str, Any]:
-    """Minimal startup reconciliation: fetch open orders/execs and log summaries.

-    Extend to merge into local state/history as needed.
    """
-    out: Dict[str, Any] = {"bybit": {}, "ibkr": {}}
-    try:
-        if bybit_adapter:
-            out["bybit"]["open_orders"] = await bybit_adapter.open_orders()
-            out["bybit"]["positions"] = await bybit_adapter.positions()
-    except Exception as e:
-        log.error(f"Bybit reconcile failed: {e}")
-    try:
-        if ibkr_adapter:
-            out["ibkr"]["open_orders"] = await ibkr_adapter.open_orders()
-            out["ibkr"]["positions"] = await ibkr_adapter.positions()
-    except Exception as e:
-        log.error(f"IBKR reconcile failed: {e}")
-    return out
+import json, time, asyncio
+from pathlib import Path
+from typing import Optional, Dict, Any, List
+from .loggerconfig import get_logger
+log = get_logger(__name__)
+
+LOG_PATH = Path("tradingbot/logs/reconciler.jsonl")
+
+def _append_jsonl(path: Path, row: Dict[str, Any]) -> None:
+    path.parent.mkdir(parents=True, exist_ok=True)
+    with open(path, "a", encoding="utf-8") as f:
+        f.write(json.dumps(row, default=str) + "\n")
+
+async def reconcile_once(bybit_adapter=None, ibkr_adapter=None) -> Dict[str, Any]:
+    out: Dict[str, Any] = {"ts": time.strftime("%Y-%m-%dT%H:%M:%S"), "bybit": {}, "ibkr": {}}
+    try:
+        if bybit_adapter:
+            out["bybit"]["open_orders"] = await bybit_adapter.open_orders()
+            out["bybit"]["positions"] = await bybit_adapter.positions()
+    except Exception as e:
+        out["bybit"]["error"] = str(e)
+        log.error(f"Bybit reconcile failed: {e}")
+    try:
+        if ibkr_adapter:
+            out["ibkr"]["open_orders"] = await ibkr_adapter.open_orders()
+            out["ibkr"]["positions"] = await ibkr_adapter.positions()
+    except Exception as e:
+        out["ibkr"]["error"] = str(e)
+        log.error(f"IBKR reconcile failed: {e}")
+    _append_jsonl(LOG_PATH, out)
+    return out
+
+async def reconcile_periodic(bybit_adapter=None, ibkr_adapter=None, interval_sec: int = 60):
+    while True:
+        try:
+            await reconcile_once(bybit_adapter, ibkr_adapter)
+        except Exception as e:
+            log.error(f"reconcile_periodic error: {e}")
+        await asyncio.sleep(interval_sec)
*** End Patch
*** Begin Patch
*** Update File: tradingbot/core/scheduler.py
@@
 async def register_catalog_refresh(sched: Scheduler, catalog, bybit_adapter=None, ibkr_adapter=None, symbols=None):
     async def _refresh():
         try:
             await catalog.refresh_from_venues(bybit_adapter, ibkr_adapter, symbols)
         except Exception as e:
             log.error(f"catalog refresh failed: {e}")
     sched.every(24*3600, _refresh)
+
+# NEW: helper to register periodic reconciler
+async def register_reconciler(sched: Scheduler, bybit_adapter=None, ibkr_adapter=None, interval_sec: int = 60):
+    from .reconciler import reconcile_once
+    async def _run():
+        try:
+            await reconcile_once(bybit_adapter, ibkr_adapter)
+        except Exception as e:
+            log.error(f"reconciler tick failed: {e}")
+    sched.every(interval_sec, _run)
*** End Patch
