*** Begin Patch
*** Add File: tradingbot/core/idempotency.py
+import json, time
+from pathlib import Path
+from typing import Set
+
+class IdempotencyStore:
+    def __init__(self, path: Path, ttl_days: int = 7):
+        self.path = Path(path)
+        self.ttl = ttl_days * 86400
+        self._seen: Set[str] = set()
+        self._load()
+    def _load(self):
+        if not self.path.exists():
+            return
+        for line in self.path.read_text(encoding="utf-8").splitlines():
+            try:
+                obj = json.loads(line)
+                if time.time() - float(obj.get("ts", 0)) < self.ttl:
+                    self._seen.add(obj.get("id"))
+            except Exception:
+                continue
+    def _append(self, cid: str):
+        self.path.parent.mkdir(parents=True, exist_ok=True)
+        with open(self.path, "a", encoding="utf-8") as f:
+            f.write(json.dumps({"id": cid, "ts": time.time()}) + "\n")
+    def seen(self, cid: str) -> bool:
+        return cid in self._seen
+    def record(self, cid: str) -> None:
+        self._seen.add(cid)
+        self._append(cid)
+
*** End Patch
*** Begin Patch
*** Update File: tradingbot/core/routing.py
@@
-from .loggerconfig import get_logger
+from .loggerconfig import get_logger
 from .exchange_conformance import clamp_order_if_needed
 from .runtime_flags import get_flags
 from .gates import can_go_live
+from .idempotency import IdempotencyStore
+from pathlib import Path
@@
 class LiveRouter:
@@
-    def __init__(self, submitters: Dict[str, Callable[[OrderContext], Any]]):
-        self.submitters = submitters
+    def __init__(self, submitters: Dict[str, Callable[[OrderContext], Any]]):
+        self.submitters = submitters
+        self._idemp = IdempotencyStore(Path("tradingbot/state/idempotency.jsonl"))
@@
-        oc = clamp_order_if_needed(oc)
+        oc = clamp_order_if_needed(oc)
+        cid = oc.extra.get("client_order_id") if oc.extra else None
+        if cid and self._idemp.seen(cid):
+            raise RuntimeError("Duplicate client_order_id detected; live submit aborted")
         return await self.submitters[venue](oc)
*** End Patch
*** Begin Patch
*** Update File: tradingbot/core/reconciler.py
@@
+from typing import Optional, Dict, Any, List
+from .loggerconfig import get_logger
+log = get_logger(__name__)
+
+async def reconcile_once(bybit_adapter=None, ibkr_adapter=None) -> Dict[str, Any]:
+    """Minimal startup reconciliation: fetch open orders/execs and log summaries.

+    Extend to merge into local state/history as needed.
    """
+    out: Dict[str, Any] = {"bybit": {}, "ibkr": {}}
+    try:
+        if bybit_adapter:
+            out["bybit"]["open_orders"] = await bybit_adapter.open_orders()
+            out["bybit"]["positions"] = await bybit_adapter.positions()
+    except Exception as e:
+        log.error(f"Bybit reconcile failed: {e}")
+    try:
+        if ibkr_adapter:
+            out["ibkr"]["open_orders"] = await ibkr_adapter.open_orders()
+            out["ibkr"]["positions"] = await ibkr_adapter.positions()
+    except Exception as e:
+        log.error(f"IBKR reconcile failed: {e}")
+    return out
+
*** End Patch
