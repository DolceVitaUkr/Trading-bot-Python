*** Begin Patch
*** Add File: tradingbot/config/calendars/cme_es.json
+{
+  "key": "CME-ES",
+  "windows_utc": [
+    {"start": "23:00", "end": "22:00"}
+  ],
+  "holidays_utc": ["2025-12-25", "2026-01-01"]
+}
+
*** End Patch
*** Begin Patch
*** Add File: tradingbot/config/calendars/ibkr_fx_opt.json
+{
+  "key": "IBKR-FX-OPT",
+  "windows_utc": [
+    {"start": "13:00", "end": "21:00"}
+  ],
+  "holidays_utc": ["2025-12-25", "2026-01-01"]
+}
+
*** End Patch
*** Begin Patch
*** Add File: tradingbot/config/calendars/bybit_perp.json
+{
+  "key": "BYBIT-PERP",
+  "windows_utc": [
+    {"start": "00:00", "end": "23:59"}
+  ],
+  "holidays_utc": []
+}
+
*** End Patch
*** Begin Patch
*** Update File: tradingbot/core/market_calendars.py
@@
-import datetime as dt
-from typing import Tuple
-from .loggerconfig import get_logger
-log = get_logger(__name__)
-_CAL = {
-    "CME-ES": (dt.time(23, 0), dt.time(22, 0)),
-    "IBKR-FX-OPT": (dt.time(13, 0), dt.time(21, 0)),
-    "BYBIT-PERP": (dt.time(0, 0), dt.time(23, 59)),
-}
-def is_session_open(calendar_key: str, now_utc: dt.datetime | None = None) -> bool:
-    now_utc = now_utc or dt.datetime.utcnow().replace(tzinfo=dt.timezone.utc)
-    start, end = _CAL.get(calendar_key, (dt.time(0,0), dt.time(23,59)))
-    t = now_utc.time()
-    if start <= end:
-        return start <= t <= end
-    return t >= start or t <= end
+import datetime as dt, json
+from pathlib import Path
+from typing import Tuple, List, Dict, Any
+from .loggerconfig import get_logger
+log = get_logger(__name__)
+
+BASE = Path("tradingbot/config/calendars")
+
+def _load_calendar(key: str) -> Dict[str, Any]:
+    filename = {
+        "CME-ES": "cme_es.json",
+        "IBKR-FX-OPT": "ibkr_fx_opt.json",
+        "BYBIT-PERP": "bybit_perp.json",
+    }.get(key)
+    if not filename:
+        return {}
+    p = BASE / filename
+    if not p.exists():
+        return {}
+    try:
+        return json.loads(p.read_text(encoding="utf-8"))
+    except Exception:
+        return {}
+
+def is_session_open(calendar_key: str, now_utc: dt.datetime | None = None) -> bool:
+    now_utc = now_utc or dt.datetime.utcnow().replace(tzinfo=dt.timezone.utc)
+    cfg = _load_calendar(calendar_key)
+    if not cfg:
+        return True
+    # Holidays
+    today = now_utc.date().isoformat()
+    for h in cfg.get("holidays_utc", []):
+        if h == today:
+            return False
+    # Windows
+    t = now_utc.time()
+    windows = cfg.get("windows_utc", [])
+    if not windows:
+        return True
+    for w in windows:
+        s = dt.time.fromisoformat(w["start"])  # HH:MM
+        e = dt.time.fromisoformat(w["end"])    # HH:MM
+        if s <= e and s <= t <= e:
+            return True
+        if s > e and (t >= s or t <= e):
+            return True
+    return False
*** End Patch
